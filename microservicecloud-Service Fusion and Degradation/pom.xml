<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.lyj.springcloud</groupId>
	<artifactId>microservicecloud</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>pom</packaging>
	<!-- 新建父工程microservicecloud，切记是packageing是pom模式 主要是定义pom文件，将后续的各个子模块公用的jar包统一提出来， 
		类似一个抽象父类 -->
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!--指定每次编译的时候都是以java8版本进行编译 ====start -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<!--指定每次编译的时候都是以java8版本进行编译 ====end -->
		<junit.version>4.12</junit.version>
		<log4j.version>1.2.17</log4j.version>
		<lombok.version>1.16.18</lombok.version>
	</properties>

	<dependencyManagement>

		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>Dalston.SR1</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>1.5.9.RELEASE</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>8.0.28</version>
				<scope>runtime</scope>
			</dependency>
			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>druid</artifactId>
				<version>1.0.31</version>
			</dependency>
			<dependency>
				<groupId>org.mybatis.spring.boot</groupId>
				<artifactId>mybatis-spring-boot-starter</artifactId>
				<version>1.3.0</version>
			</dependency>
			<dependency>
				<groupId>ch.qos.logback</groupId>
				<artifactId>logback-core</artifactId>
				<version>1.2.3</version>
			</dependency>

			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
			</dependency>
			<dependency>
				<groupId>log4j</groupId>
				<artifactId>log4j</artifactId>
				<version>${log4j.version}</version>
			</dependency>


		</dependencies>
	</dependencyManagement>
	<build>
	<!-- 这里的 配置是使在Eureka的web界面能够访问服务的info界面（服务的详细信息）==start -->
	<!-- finalName指父工程的名字 -->
		<finalName>microservicecloud</finalName>
		<!-- resources：资源，允许你访问的资源 
		directory：允许你访问这个路径下的资源
		filtering：访问过滤开启-->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
		<!-- plugins:引入插件的意思，
		 <groupId>org.apache.maven.plugins</groupId>
		<artifactId>maven-resources-plugin</artifactId>
				上面的插件是负责解析和解读的-->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<!-- configuration:解析配置的意思，
				 <delimiter>$</delimiter>：意思就是以$开头和以$结尾的
				 在<directory>src/main/resources</directory>路径下面
				 的信息，我就能读取，即要显示的信息-->
				<configuration>
					<delimiters>
						<delimiter>$</delimiter>
					</delimiters>
				</configuration>
			</plugin>

		</plugins>
<!-- 这里的 配置是使在Eureka的web界面能够访问服务的info界面（服务的详细信息）==end -->
	</build>




	<!-- 创建microservice-api服务，自动在父工程pom文件里引进module配置 -->
	<modules>
		<module>microservicecloud-api</module>
		<module>microservicecloud-provider-dept-8001</module>
		<module>microservicecloud-consumer-dept-80</module>
		<module>microservicecloud-eureka-7001</module>
		<module>microservicecloud-eureka-7002</module>
		<module>microservicecloud-eureka-7003</module>
		<module>microservicecloud-provider-dept-8002</module>
		<module>microservicecloud-provider-dept-8003</module>
		<module>microservicecloud-consumer-dept-feign</module>
		<module>microservicecloud-provider-dept-hystrix-8001</module>
	</modules>
</project>